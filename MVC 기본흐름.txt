MVC 기본흐름
모든 요청은 서블릿이 받는다.
서블릿과 jsp는 request, response를 갖고있고, 다른 java파일은 없다.

서블릿이 Control 역할을 하고, 
java에서 Model 일을 하고 (일을 하는 집합체)
서블릿에서 JSP로 forward를 시켜서 화면서 View 한다.

만약 회원가입 요청이 들어오면 서블릿에서 if문을 써서 할수있지만, 요청이 많아지면 코드가 길어지기 때문에 properties를 사용(환경설정 파일)
properties에서 이 요청에 알맞은 자바파일로 분리해준다.
이 사이에 서블릿 마음데로 properties를 하면 못읽어오기 때문에 wep.xml에 설정을 해줘야한다. 

클래스 파일에서 DB에 가서 데이터를 갖고오고 싶으면,
멍령어를 써야하는데 명령어를 쓰려면 먼저 함수(메서드) public void() 를 만들어야한다. 그래야 request.getParameter(명령어)를 쓸 수 있다.

근데 클래스가 많아져서 그때마다 함수명을 다르게 하면 너무 어렵고 코드가 길어지기 때문에, 추상메서드를 만들어서 자식은 추상메서드를 상속받는다.
1. abtract => 선호하지 않는다 : 자바는 다중상속이 안되기때문에
2. interface => 주로 사용

인터페이스로 부모를 선언하고. 인터페이스에 추상메서드 하나가 들어간다.
모든 자식들은 부모를 통해서 추상메서들 오바라이딩한다. 
request.getParameter(" ") 
일반 자바파일은 request가 없어서 그냥 request를 쓰면 에러가 난다.

request는 서블릿과 jsp에 있기 때문에 자바한테 갈 때 부모한테 접근하려면 자신(서블릿)의 request와 response를 줘야하고, 그래야 그걸 갖고 데이터를 처리할 수 있다.
자식클래스는 request와 response를 받아서 그걸 오버라이딩 해서 쓴다.

request.setAttribute를 써서 데이터를 받아 서블릿에 데이터를 실어서 jsp로 가야한다. 근데 request가 연결돼있는지 모르니깐 forward시키는 것이다.
결국 세가지가 다 한가지 request(서블릿꺼)를 쓰는것이다.

이걸 MVC라고 얘기한다.

cf) 서블릿은 일을하는게 아니라 교통수단 정도로 생각하면된다.
