memberMVC 프로젝트

이 프로젝트는 MVC패턴을 기반으로 한 웹 애플리케이션입니다.
MVC패턴을 따르는 이 프로젝트의 주요 흐름

1. 구성 요소
- Model (데이터 처리 부분)
*DAO : 데이터베이스와 통신하는 역할 담당
MemberDAO.java파일을 통해 회원 정보를 처리하는 메서드들이 있습니다.
<회원정보를 저장하거나 업데이트하는 기능을 담당합니다>

*DTO 
MemberDTO.java 파일에서 회원 정보를 담는 객체입니다. 
이는 회원 id, 비밀번호, 이름 등의 정보를 저장하고 전달하기 위한 클래스입니다.


- View (사용자에게 보여주는 화면)
*JSP 파일들 : 사용자에게 보여지는 화면
각 JSP파일은 HTML 기반으로 화면을 구성하고, 사용자 입력을 받아 서버로 전달합니다.


- Controller (요청을 처리하는 부분)
*Servlet : 클라이언트의 요청을 받고, 적절한 서비스 클래스에 전달합니다.
properties 파일에 정의된 URL 요청과 이를 처리할 서비스 클래스를 매핑해주는 역할을 합니다.

*Service 클래스들 : 클라이언트의 요청을 처리하는 비즈니스 로직이 포함되어 있습니다. (비즈니스 로직이란? 어떤 일을 처리하는 방식 즉 사용자가 무엇을 하려고 할 때, 시스템이 그 일을 어떻게 처리할지 정의하는 부분 =>
ex) 유효성검사, 중복체크, 저장 등등)

cf) 클라이언트 즉 자바스크립트(js)에서 한 유효성 검사는 클라이언트에서 하는 유효성검사이므로, 사용자에게 빠르게 피드백 할 수 있지만 보안 문제가 있을 수 있어 서버에서 유효성 검사를 하는게 안전하긴 하다.


2. 프로젝트의 기본 흐름

(1) 사용자 요청 : 
사용자가 웹 브라우저에서 /member/writeForm.do 와 같은 URL을 요청합니다. (회원가입)

(2) 서블릿이 요청을 처리 :
*서블릿이 이 요청을 받습니다.
*properties 파일에서 /member/writeForm.do가 WriteFormService와 매핑되어 있는 것을 확인합니다.
*서블릿은 writeFormService 클래스를 호출합니다.

(3) 서비스 클래스가 비즈니스 로직 처리 :
*WriteFormService는 회원가입 폼을 보여주는 역할을 하며, /member/writeForm.jsp 로 이동시킵니다.
*만약 사용자가 회원가입 폼을 작성해서 제출하면, /member/write.do로 요청이 가고, 이때 WriteService가 호출되어 회원가입 처리 로직을 수행합니다.
*writeService는 MemberDTO 객체를 생성하여 사용자의 데이터를 담고, MemberDAO를 통해 데이터를 데이터베이스에 저장합니다.

(4) DAO가 데이터베이스와 통신 : 
*MemberDAO는 실제로 MyBatis를 통해 데이터베이스와 연결됩니다.
write() 메서드를 호출하여 회원 정보를 DB에 저장합니다.

(5) View로 이동 :
*처리 결과에 따라 JSP 파일을 사용해 결과를 보여줍니다. 


3. 파일별 역할
- Controller (서블릿) :
모든 요청을 처리하는 중앙 컨트롤러 역할을 합니다. 사용자의 요청이 어떤 서비스로 가야 하는지 판단하고, 해당 서비스 클래스를 호출합니다.

-Service :
*WriteFormService.java: 회원가입 폼을 표시하는 서비스.
*WriteService.java: 회원가입 처리를 담당하는 서비스. 데이터를 받아 DB에 저장하는 로직을 처리합니다.
*LoginService.java: 로그인 요청을 처리하는 서비스.
*UpdateFormService.java: 회원정보 수정 폼을 보여주는 서비스.
*UpdateService.java: 회원정보 수정을 처리하는 서비스.

-DAO :
MemberDAO.java: 데이터베이스와 통신하여 회원 정보를 저장, 수정, 조회하는 기능을 담당합니다.

-View (JSP) :
*writeForm.jsp: 회원가입 폼을 제공하는 JSP 페이지.
*writeOk.jsp: 회원가입 성공 메시지를 보여주는 페이지.
*loginForm.jsp: 로그인 폼을 제공하는 JSP 페이지.
*updateForm.jsp: 회원정보 수정 폼을 제공하는 JSP 페이지.


4. 간단한 흐름 예시 (회원가입)
1. 사용자가 브라우저에서 /member/writeForm.do로 회원가입 폼을 요청합니다.
2. ControlServlet이 요청을 받아 WriteFormService로 연결합니다.
3. WriteFormService가 /member/writeForm.jsp를 반환하여 회원가입 폼을 사용자에게 보여줍니다.
4. 사용자가 폼을 작성하고 제출하면, /member/write.do로 요청이 들어옵니다.
5. ControlServlet이 이 요청을 받아 WriteService로 연결합니다.
6. WriteService는 폼 데이터를 받아 MemberDAO를 사용해 DB에 저장합니다.
7. 처리 후 writeOk.jsp로 이동하여 성공메세지를 사용자에게 보여줍니다.







