자바

1. 객체지향 프로그래밍 (OOP, Object-Oriented Programming)
자바는 객체지향 프로그래밍 언어입니다. 객체지향 프로그래밍은 모든 것을 객체로 생각하고, 객체들이 상호작용하면서 프로그램을 만드는 방식입니다. 

- 기본개념 :
* 객체(Object) : 프로그램에서 데이터와 기능을 가진 하나의 단위. 예를들어 "자동차"라는 객체는 색상,브랜드(데이터)와 달리기,멈추기(기능)을 가질 수 있다.
*클래스(Class) : 객체를 만드는 설계도. 객체가 어떤 속성과 기능을 가질지 정의하는 틀입니다.

-OOP의 주요 특징 :
*캡슐화(Encapsulation) : 데이터와 기능을 하나의 객체로 묶고, 외부에서 직접 접근할 수 없게 보호하는것.
*상속(Inheritance) : 기존 클래스의 특징을 물려받아 새로운 클래스를 만들 수 있는 기능. 중복 코드를 줄여줍니다.
*다형성(Polymorphism) : 같은 메서드 이름이지만, 다양한 방식으로 동작하게 만드는것. 예를들어 '동물.소리내기()'는 개, 고양이 마다 다른 소리를 내게 할 수 있다.
*추상화(Abstraction) : 객체의 중요한 특징만을 뽑아내어 클래스로 정의하는 것.


2. 조건문과 반복문
- 조건문 (if-else) :  프로그램이 특정 조건을 만족할 때만 다른 동작을 하도록 제어하는 문법.

- 반복문(for, while) : 특정 동작을 여러 번 반복하고 싶을 때 사용합니다.


3. 메서드 : 
어떤 동작을 정의한 작은 코드 블록, 예를들어 숫자 두개를 더하는 메서드를 만들어 두면 나중에 필요할 때마다 그 메서드를 호출해서 사용할 수 있다.


4. 컬렉션 프레임워크 (Collection Framework)
-컬렉션이란? : 
자바에서 컬렉션은 데이터를 모아두는 도구이다. 여러 개의 데이터를 쉽게 저장하고, 꺼내 쓰고, 삭제할 수 있게 도와준다.

-자주쓰는 컬렉션
*List : 순서가 있는 데이터를 저장 (예 : 대기표 리스트)
*Set : 중복되지 않은 데이터를 저장 (예: 유일한 회원번호)
*Map : 키와 값의 쌍으로 데이터를 저장(예 : 이름과 나이를 매칭)

5. 클래스(Class) : 
클래스는 설계도라고 생각하면된다. 클래스를 통해 객체를 만들어 사용한다. 예를들어 "자동차" 라는 클래스를 만들면, 그 클래스를 통해 자동차라는 객체를 만들 수 있다.
하나의 클래스를 통해 여러 개의 비슷한 기능을 가진 객체를 쉽게 만들 수 있고, 중복되는 코드를 줄이고 관리하기 편해서 사용한다

6. 인터페이스(Interface) :
인터페이스는 어떤 동작들이 있어야 하는지 약속해주는 역할을 한다. 하지만 구체적으로 어떻게 그 동작을 할지는 나중에 정한다.
인터페이스는 여러 객체들이 비슷한 동작을 해야 할 때 그 동작을 정해줄 수 있다. 예를들어 동물마다 소리를 다르게 내지만, 모든 동물은 소리를 내야한다는 약속을 할 수 있다. 이를 통해 다양한 동작을 미리 정해줄 수 있다.

7.HTML, JavaScript, jQuery, jQuery Ajax
-HTML : 웹 페이지 구조를 만드는 도구, 웹 페이지에서 제목, 문단, 이미지, 버튼 같은 요소들을 정의하는 역할
건물의 뼈대라 생각하면된다.
-JavaScript : 웹 페이지에서 동적인 기능을 추가해주는 프로그래밍 언어.
버튼을 클릭했을 때 뭔가가 바뀌거나 페이지가 자동으로 업데이트 되는 기능들을 자바스크립트를 통해 만들 수 있다. 웹 페이지를 더 상호작용하게 만들어준다.

-jQuery : 자바스크립트를 더 간편하게 쓸 수 있도록 도와주는 도구. 

-jQuery Ajax : Ajax는 웹 페이지를 새로고침하지 않고도 서버와 데이터를 주고받는 기술.
웹페이지가 더 빠르게 동작할 수 있도록 도와준다. 예를들어 사용자가 글을 저장할 때 페이지가 다시 로드되지 않고, 바로 저장 결과를 화면에 보여줄 수 있다.

8. 서블릿(Servlet)
서버에서 동작하는 자바 프로그램. 사용자가 웹 페이지에서 버튼을 클릭하거나, 데이터를 보내면, 서버에서 그 요청을 처리하는 역할을 한다.
서버와 클라이언트(웹 페이지) 사이에서 데이터를 주고받는 역할을 해준다. 예를들어 로그인 버튼을 누르면 서블릿이 사용자 정보를 받아서 처리하고, 그 결과를 화면에 보여줄 수 있다.

9. MyBatis
자바와 DB를 쉽게 연결해주는 도구.
DB에서 데이터를 가져오거나 저장할 때, 복잡한 SQL 쿼리문을 자바코드와 연결해서 쓰는 것이 힘들 수 있기 때문에 MyBatis는 DB와 자바를 연결하는 작업을 더 간단하게 도와주는 역할을 한다.
예를들어 사용자가 입력한 정보를 DB에 저장하거나 불러오는 작업을 쉽게 처리할 수 있다.

10. EL / JSTL
- EL : 
JSP페이지에서 자바 코드를 쓰지 않고도 데이터를 간편하게 출력할 수 있는 언어.
JSP코드가 길어지면 복잡해지기 때문에, EL을 사용하면 데이터를 더 간단하게 보여줄 수 있다.
예를들어 사용자의 이름을 출력할 때 ${userName} 이렇게 간단하게 쓸 수 있다.
-JSTL : 
JSTL은 JSP에서 자주 사용하는 기능들을 태그처럼 사용할 수 있게 해준다. 예를 들어 반복문이나 조건문 같은 것들을 쉽게 처리할 수 있다. 
자바 코드를 최소화해서, HTML처럼 간단하게 작성할 수 있게 도와준다.
목록을 반복해서 출력해야 할 때 자바 코드를 쓰는 대신 JSTL태그를 사용하면 코드가 훨씬 간단해진다.

11. MVC패턴 
-Model : 데이터를 다루는 부분, DB에서 회원정보를 가져오거나 저장하는 일을 한다.
-View : 화면을 보여주는 부분, 사용자가 보는 웹 페이지를 말한다.
-Controller : 사용자의 요청을 받아서, Model에게 데이터 처리를 요청하고, 그 결과를 다시 View로 전달해주는 역할을 한다.

각각의 역할을 따로 나눠서 관리하면 코드가 훨씬 깔끔해지고 유지보수하기 쉬워진다.
예를들어 화면과 데이터를 처리하는 코드를 분리하면 화면에 문제가 생기더라도 데이터 처리 부분은 건드리지 않아도 되기때문에 코드가 더 잘 정리되고 수정이 쉬워진다.

12. Spring 
자바 웹 어플리케이션을 더 쉽게 개발할 수 있게 해주는 프레임워크이다. 복잡한 설정을 대신 처리해주고, 필요한 기능을 편리하게 쓸 수 있게 해준다.
자바 웹 어플리케이션을 만들 때, 반복적으로 해야 할 작업들을 Spring이 자동으로 처리해주기 때문에 개발자가 핵심 기능 개발에만 집중할 수 있다.
MVC 구조를 쉽게 구현할 수 있게 도와주고, DB와도 쉽게 연결할 수 있다.

-DI (Dependency Injection) :  객체들끼리 서로 연결해줄 때 자동으로 연결해줘서 개발자가 신경 쓸 부분을 줄여준다.

-AOP (Aspect-Oriented Programming) : 반복되는 코드를 따로 빼서, 필요한 곳에 쉽게 추가할 수 있게 해준다. 예를들어 로그남기기 같은 작업을 여러 곳에서 쉽게 사용할 수 있게 만들어준다.

13. Spring Boot
Spring을 더 쉽게 사용할 수 있게 해주는 도구이다. Spring설정을 자동으로 해주고, 더 빠르게 웹 애플리케이션을 개발할 수 있게 도와준다.
Spring을 처음부터 설정하고 사용하기는 복잡할 수 있는데, Spring Boot는 그런 복잡한 설정을 자동으로 처리해줘서, 개발자는 코딩에만 집중할 수 있다.
예를들어 웹 서버도 자동으로 실행되고, 필요한 설정도 미리 되어 있어서, 빠르게 웹 애플리케이션을 시작할 수 있다.


